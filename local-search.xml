<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Redis中跳跃表的实现及理解</title>
    <link href="/2024/10/01/Redis%E4%B8%AD%E8%B7%B3%E8%B7%83%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8F%8A%E7%90%86%E8%A7%A3/"/>
    <url>/2024/10/01/Redis%E4%B8%AD%E8%B7%B3%E8%B7%83%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8F%8A%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="跳跃表的主要特点包括"><a href="#跳跃表的主要特点包括" class="headerlink" title="跳跃表的主要特点包括"></a>跳跃表的主要特点包括</h1><ul><li>有序性：跳跃表中的元素是有序的，可以快速地进行范围查询。</li><li>概率性：跳跃表的高度是随机决定的，这使得它在平均情况下具有对数时间复杂度。</li><li>动态性：跳跃表可以在运行时动态地添加和删除元素，而不需要重新构建整个结构。</li><li>空间效率：相比于平衡树，跳跃表的空间效率更高，因为它不需要存储指向父节点的指针。</li></ul><p>在 Redis 中，跳跃表被用于实现有序集合，它允许用户添加、删除、更新和查询元素，并且可以按照分数对元素进行排序。</p><p><img src="https://nullcc.github.io/assets/images/post_imgs/redis_data_structure_10.png" alt="Redis的zskiplist" title="Redis的zskiplist"></p><p><strong>数据结构定义：</strong><br>Redis 中的跳跃表由 zskiplistNode 和 zskiplist 两个结构体定义。zskiplistNode 表示跳跃表的节点，包含成员对象 obj、分值 score、后退指针 backward 以及层 level 信息；zskiplist 表示跳跃表本身，包含头尾节点指针、长度和层高信息。</p><p><strong>节点层级：</strong><br>跳跃表的每个节点可以有多个层，称为索引层，每个索引层包含一个前向指针 forward 和跨度 span。层高是随机生成的，遵循幂次定律，最大层高为 32。</p><p><strong>创建跳跃表：</strong><br>使用 zslCreate 函数创建一个新的跳跃表，初始化层高为 1，长度为 0，并创建头节点，头节点的层高为 32，其余节点的层高根据需要动态生成。</p><p><strong>插入节点：</strong><br>插入操作首先确定新节点的层高，然后从高层向低层搜索插入位置，并更新 update 数组，该数组记录所有需要调整的前置节点。接着，创建新节点，并根据 update 数组和 rank 数组更新跨度和前向指针。</p><p><strong>查找操作：</strong><br>查找操作从高层开始，沿着链表前进；遇到大于目标值的节点时下降到下一层，继续查找。经过的所有节点的跨度之和即为目标节点的排位（rank）。</p><p><strong>删除节点：</strong><br>删除操作根据分值和对象找到待删除节点，并更新相关节点的前向指针和跨度。如果节点在多层中存在，需要逐层删除。</p><p><strong>性能分析：</strong><br>跳跃表支持平均 O(logN)、最坏 O(N) 复杂度的节点查找，且实现比平衡树简单。在有序集合中，跳跃表可以处理元素数量较多或元素成员较长的情况。</p><p><strong>Redis 应用场景：</strong><br>Redis 使用跳跃表实现有序集合键，特别是当集合中的元素数量较多或元素的成员是较长的字符串时。跳跃表也用于 Redis 集群节点中的内部数据结构。</p><p><strong>跳跃表的优点：</strong><br>跳跃表的优点包括支持快速的查找操作，以及在实现上相对简单。它通过维护多个层级的链表来提高查找效率，且可以顺序性地批量处理节点。</p><p><strong>跳跃表的实现细节：</strong><br>跳跃表的实现细节包括节点的创建、插入、删除、搜索等操作，以及维护跳跃表的最大层高和节点数量等信息。具体实现可以参考 Redis 源码中的server.h和t_zset.c 文件。</p><p>基本数据结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">zskiplist</span> &#123;</span> <span class="hljs-comment">//跳表的元数据信息</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">zskiplistNode</span> *<span class="hljs-title">header</span>, *<span class="hljs-title">tail</span>;</span> <span class="hljs-comment">//头指针和尾指针</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> length; <span class="hljs-comment">//跳表的长度,即除头节点之外的节点总数</span><br>    <span class="hljs-type">int</span> level; <span class="hljs-comment">//层高,即除头节点之外的节点层高的最大值</span><br>&#125; zskiplist;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">zskiplistNode</span> &#123;</span> <span class="hljs-comment">//跳表的节点</span><br>    sds ele; <span class="hljs-comment">//有序集合中成员的名字</span><br>    <span class="hljs-type">double</span> score; <span class="hljs-comment">//有序集合中成员的分值</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">zskiplistNode</span> *<span class="hljs-title">backward</span>;</span> <span class="hljs-comment">//后退指针</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">zskiplistLevel</span> &#123;</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">zskiplistNode</span> *<span class="hljs-title">forward</span>;</span> <span class="hljs-comment">//指向下一个节点的指针</span><br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> span; <span class="hljs-comment">//跨度,或者说叫距离,跨过3个节点span是4</span><br>    &#125; level[]; <span class="hljs-comment">//节点中层这个概念通过柔性数组实现,每一层是数组中的一个元素</span><br>&#125; zskiplistNode;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">zslRandomLevel</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">int</span> level = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> ((random()&amp;<span class="hljs-number">0xFFFF</span>) &lt; (ZSKIPLIST_P * <span class="hljs-number">0xFFFF</span>))<br>        level += <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> (level&lt;ZSKIPLIST_MAXLEVEL) ? level : ZSKIPLIST_MAXLEVEL;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要操作：</p><p>创建节点和跳表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//创建跳表</span><br>zskiplist *<span class="hljs-title function_">zslCreate</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">int</span> j;<br>    <span class="hljs-comment">//声明跳表元数据节点</span><br>    zskiplist *zsl;<br>    <br>    <span class="hljs-comment">//为了存储元数据的节点分配内存</span><br>    zsl = zmalloc(<span class="hljs-keyword">sizeof</span>(*zsl));<br>    zsl-&gt;level = <span class="hljs-number">1</span>;<br>    zsl-&gt;length = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//创建zsl的头节点指针指向刚创建的跳表头节点,层数为32层,分数为0,不存储数据</span><br>    zsl-&gt;header = zzslCreateNode(ZSKIPLIST_MAXLEVEL,<span class="hljs-number">0</span>,<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-comment">//从0到63初始化头节点每一层的前进指针为空且跨度为0</span><br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; ZSKIPLIST_MAXLEVEL; j++) &#123;<br>        zsl-&gt;header-&gt;level[j].forward = <span class="hljs-literal">NULL</span>;<br>        zsl-&gt;header-&gt;level[j].span = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">//设置头节点的后退指针为空</span><br>    zsl-&gt;header-&gt;backward = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//设置跳表的尾节点为空,因为现在还没有节点,只有一个头节点</span><br>    zsl-&gt;tail = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> zsl;<br>&#125;<br><br><span class="hljs-comment">//创建跳表节点</span><br>zskiplistNode *<span class="hljs-title function_">zslCreateNode</span><span class="hljs-params">(<span class="hljs-type">int</span> level, <span class="hljs-type">double</span> score, sds ele)</span> &#123;<br>    <span class="hljs-comment">//为跳表节点声明空间,大小为zskiplistNode加上用来描述层级的level数组的大小</span><br>    zskiplistNode *zn =<br>        zmalloc(<span class="hljs-keyword">sizeof</span>(*zn)+level*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> zskiplistLevel));<br>    <span class="hljs-comment">//设置分数和数据</span><br>    zn-&gt;score = score;<br>    zn-&gt;ele = ele;<br>    <span class="hljs-keyword">return</span> zn;<br>&#125;<br></code></pre></td></tr></table></figure><p>插入节点：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> ZSKIPLIST_P 0.25</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ZSKIPLIST_MAXLEVEL 32</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">zslRandomLevel</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">int</span> level = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//左边是随机生成一个值,取低16位,相当于从1到65535这种取值,右边是0.25乘以65535,所以就是有四分之一的几率进到循环里面让层高加1</span><br>    <span class="hljs-keyword">while</span> ((random()&amp;<span class="hljs-number">0xFFFF</span>) &lt; (ZSKIPLIST_P * <span class="hljs-number">0xFFFF</span>))<br>        level += <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//如果层高大于等于32了,就用32,反之用随机加出来的值</span><br>    <span class="hljs-keyword">return</span> (level&lt;ZSKIPLIST_MAXLEVEL) ? level : ZSKIPLIST_MAXLEVEL;<br>&#125;<br><br><br><br><span class="hljs-comment">/* Insert a new node in the skiplist. Assumes the element does not already</span><br><span class="hljs-comment"> * exist (up to the caller to enforce that). The skiplist takes ownership</span><br><span class="hljs-comment"> * of the passed SDS string &#x27;ele&#x27;. */</span><br>zskiplistNode *<span class="hljs-title function_">zslInsert</span><span class="hljs-params">(zskiplist *zsl, <span class="hljs-type">double</span> score, sds ele)</span> &#123;<br>    <span class="hljs-comment">//update数组存储的是每一层中要被插入位置的前一个节点</span><br>    zskiplistNode *update[ZSKIPLIST_MAXLEVEL], *x;<br>    <span class="hljs-comment">//rank数组存储的是update节点在所有节点中的排名,计算方式是跨度的累加</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> rank[ZSKIPLIST_MAXLEVEL];<br>    <span class="hljs-type">int</span> i, level;<br><br>    serverAssert(!isnan(score));<br>    <br>    <span class="hljs-comment">//x指向头节点</span><br>    x = zsl-&gt;header;<br>    <span class="hljs-comment">//从跳表当前最高层开始,数组从0开始而level从1开始所以这里减个1</span><br>    <span class="hljs-keyword">for</span> (i = zsl-&gt;level<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-comment">//如果当前是最高层则rank[i]为0否则等于上一层的rank值</span><br>        rank[i] = i == (zsl-&gt;level<span class="hljs-number">-1</span>) ? <span class="hljs-number">0</span> : rank[i+<span class="hljs-number">1</span>];<br>        <span class="hljs-comment">//如果当前层当前节点的下一个节点不为空且下一个节点的分值比要插入的节点小,如果分值相同使用sdscmp对字典序进行比较</span><br>        <span class="hljs-keyword">while</span> (x-&gt;level[i].forward &amp;&amp;<br>                (x-&gt;level[i].forward-&gt;score &lt; score ||<br>                    (x-&gt;level[i].forward-&gt;score == score &amp;&amp;<br>                    sdscmp(x-&gt;level[i].forward-&gt;ele,ele) &lt; <span class="hljs-number">0</span>)))<br>        &#123;<br>            <span class="hljs-comment">//rank需要加上当前节点的跨度</span><br>            rank[i] += x-&gt;level[i].span;<br>            <span class="hljs-comment">//向前走一步</span><br>            x = x-&gt;level[i].forward;<br>        &#125;<br>        <span class="hljs-comment">//update对应的是要插入位置的前一个节点</span><br>        update[i] = x;<br>    &#125;<br>    <span class="hljs-comment">//生成该节点的层数</span><br>    level = zslRandomLevel();<br>    <span class="hljs-comment">//如果生成的高度比当前跳表的高度高</span><br>    <span class="hljs-keyword">if</span> (level &gt; zsl-&gt;level) &#123;<br>        <span class="hljs-comment">//从当前最高层的上一层开始,一直处理到到新生成的高度</span><br>        <span class="hljs-keyword">for</span> (i = zsl-&gt;level; i &lt; level; i++) &#123;<br>            <span class="hljs-comment">//因为要比其他所有节点的层都要高,所以当前层从当前位置到头节点之间没有其他节点,此时rank[i]的值为头节点到头节点的距离,所以是0.由于update数组代表插入位置的前一个节点,,所以update[i]为头节点且跨度为跳表长度</span><br>            rank[i] = <span class="hljs-number">0</span>;<br>            update[i] = zsl-&gt;header;<br>            update[i]-&gt;level[i].span = zsl-&gt;length;<br>        &#125;<br>        <span class="hljs-comment">//更新跳表高度</span><br>        zsl-&gt;level = level;<br>    &#125;<br>    <span class="hljs-comment">//将x指向新建的节点</span><br>    x = zslCreateNode(level,score,ele);<br>    <span class="hljs-comment">//遍历当前所有的层</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; level; i++) &#123;<br>        <span class="hljs-comment">//更新要插入节点的每一层的前进指针为插入节点前一个节点的前进指针</span><br>        x-&gt;level[i].forward = update[i]-&gt;level[i].forward;<br>        <span class="hljs-comment">//更新要插入节点的前一个节点每一层的前进指针指向新建节点</span><br>        update[i]-&gt;level[i].forward = x;<br>        <br>        <span class="hljs-comment">//这两句更新跨度的抽出去在下面单独说</span><br>        x-&gt;level[i].span = update[i]-&gt;level[i].span - (rank[<span class="hljs-number">0</span>] - rank[i]);<br>        update[i]-&gt;level[i].span = (rank[<span class="hljs-number">0</span>] - rank[i]) + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">//如果新建的节点层级比前一个节点矮的话,那么需要把前一个节点高出部分层级的跨度都加一,因为相当于多跨了一个节点</span><br>    <span class="hljs-keyword">for</span> (i = level; i &lt; zsl-&gt;level; i++) &#123;<br>        update[i]-&gt;level[i].span++;<br>    &#125;<br>    <br>    x-&gt;backward = (update[<span class="hljs-number">0</span>] == zsl-&gt;header) ? <span class="hljs-literal">NULL</span> : update[<span class="hljs-number">0</span>];<br>    <span class="hljs-comment">//如果插入节点最底层指针的前进指针不为空,说明当前节点不是被插入了跳表尾部</span><br>    <span class="hljs-keyword">if</span> (x-&gt;level[<span class="hljs-number">0</span>].forward)<br>        x-&gt;level[<span class="hljs-number">0</span>].forward-&gt;backward = x;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-comment">//否则把跳表尾节点的指针更新为x</span><br>        zsl-&gt;tail = x;<br>    <span class="hljs-comment">//插入完成后把跳表的长度加1</span><br>    zsl-&gt;length++;<br>    <span class="hljs-comment">//返回被插入的节点</span><br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><p>查找节点：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Find the rank for an element by both score and key.</span><br><span class="hljs-comment"> * Returns 0 when the element cannot be found, rank otherwise.</span><br><span class="hljs-comment"> * Note that the rank is 1-based due to the span of zsl-&gt;header to the</span><br><span class="hljs-comment"> * first element. */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-title function_">zslGetRank</span><span class="hljs-params">(zskiplist *zsl, <span class="hljs-type">double</span> score, sds ele)</span> &#123;<br>    zskiplistNode *x;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> rank = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i;<br>    <br>    <span class="hljs-comment">//把x指向头节点</span><br>    x = zsl-&gt;header;<br>    <span class="hljs-comment">//从最高层开始遍历</span><br>    <span class="hljs-keyword">for</span> (i = zsl-&gt;level<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-comment">//如果下一个节点不为空且下一个节点分数比当前节点小或者分数相等但是小于等于下一个元素的字典序</span><br>        <span class="hljs-keyword">while</span> (x-&gt;level[i].forward &amp;&amp;<br>            (x-&gt;level[i].forward-&gt;score &lt; score ||<br>                (x-&gt;level[i].forward-&gt;score == score &amp;&amp;<br>                sdscmp(x-&gt;level[i].forward-&gt;ele,ele) &lt;= <span class="hljs-number">0</span>))) &#123;<br>            <span class="hljs-comment">//利用span更新排名</span><br>            rank += x-&gt;level[i].span;<br>            <span class="hljs-comment">//指向下一个同层元素</span><br>            x = x-&gt;level[i].forward;<br>        &#125;<br><br>        <span class="hljs-comment">/* x might be equal to zsl-&gt;header, so test if obj is non-NULL */</span><br>        <span class="hljs-comment">//因为有可能跳表里没有元素,所以这里最后的x可能是头节点,于是这里判了一下空防止是头节点,并且元素相等的话就返回计算好的排名</span><br>        <span class="hljs-keyword">if</span> (x-&gt;ele &amp;&amp; sdscmp(x-&gt;ele,ele) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> rank;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//能走到这的话说明元素不存在,返回0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">/* Finds an element by its rank. The rank argument needs to be 1-based. */</span><br>zskiplistNode* <span class="hljs-title function_">zslGetElementByRank</span><span class="hljs-params">(zskiplist *zsl, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> rank)</span> &#123;<br>    zskiplistNode *x;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> traversed = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i;<br><br>    x = zsl-&gt;header;<br>    <span class="hljs-keyword">for</span> (i = zsl-&gt;level<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">while</span> (x-&gt;level[i].forward &amp;&amp; (traversed + x-&gt;level[i].span) &lt;= rank)<br>        &#123;<br>            traversed += x-&gt;level[i].span;<br>            x = x-&gt;level[i].forward;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (traversed == rank) &#123;<br>            <span class="hljs-keyword">return</span> x;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>删除节点：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">zslDelete</span><span class="hljs-params">(zskiplist *zsl, <span class="hljs-type">double</span> score, sds ele, zskiplistNode **node)</span> &#123;<br>    <span class="hljs-comment">//删除也需要记录前一个节点</span><br>    zskiplistNode *update[ZSKIPLIST_MAXLEVEL], *x;<br>    <span class="hljs-type">int</span> i;<br>    <br>    <span class="hljs-comment">//x指向头节点</span><br>    x = zsl-&gt;header;<br>    <span class="hljs-comment">//从最高层开始遍历</span><br>    <span class="hljs-keyword">for</span> (i = zsl-&gt;level<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-comment">//循环方式和插入一样,直到找到要删除节点的前一个节点,然后用update存下来</span><br>        <span class="hljs-keyword">while</span> (x-&gt;level[i].forward &amp;&amp;<br>                (x-&gt;level[i].forward-&gt;score &lt; score ||<br>                    (x-&gt;level[i].forward-&gt;score == score &amp;&amp;<br>                     sdscmp(x-&gt;level[i].forward-&gt;ele,ele) &lt; <span class="hljs-number">0</span>)))<br>        &#123;<br>            x = x-&gt;level[i].forward;<br>        &#125;<br>        update[i] = x;<br>    &#125;<br>    <br>    <span class="hljs-comment">//x现在指向的是最下面一层的update节点,这里往前走了一步也就是变成了插入节点的最下面一层</span><br>    x = x-&gt;level[<span class="hljs-number">0</span>].forward;<br>    <span class="hljs-comment">//如果插入节点最下面一层存在并且分数能对得上并且元素值也能对得上</span><br>    <span class="hljs-keyword">if</span> (x &amp;&amp; score == x-&gt;score &amp;&amp; sdscmp(x-&gt;ele,ele) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//调用zslDeleteNode删除这个节点</span><br>        zslDeleteNode(zsl, x, update);<br>        <span class="hljs-keyword">if</span> (!node)<br>            zslFreeNode(x);<br>        <span class="hljs-keyword">else</span><br>            *node = x;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//实际删除节点的方法</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">zslDeleteNode</span><span class="hljs-params">(zskiplist *zsl, zskiplistNode *x, zskiplistNode **update)</span> &#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-comment">//从最下面一层到最上面一层开始遍历</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; zsl-&gt;level; i++) &#123;<br>        <span class="hljs-comment">//如果要删除节点的前一个节点的前进指针是要删除节点的话</span><br>        <span class="hljs-keyword">if</span> (update[i]-&gt;level[i].forward == x) &#123;<br>            <span class="hljs-comment">//前一个节点的span需要加上被删除节点的span再加1</span><br>            update[i]-&gt;level[i].span += x-&gt;level[i].span - <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">//把前一个节点的前进指针设置成要删除节点的前进指针</span><br>            update[i]-&gt;level[i].forward = x-&gt;level[i].forward;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//走到else说明update的层高比插入节点高,且现在正在处理高出的那部分层,这时候直接把span减1即可</span><br>            update[i]-&gt;level[i].span -= <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//如果被删除节点的前进指针存在的话</span><br>    <span class="hljs-keyword">if</span> (x-&gt;level[<span class="hljs-number">0</span>].forward) &#123;<br>        <span class="hljs-comment">//设置被删除节点的下一个节点的后退指针指向被删除节点的前一个节点</span><br>        x-&gt;level[<span class="hljs-number">0</span>].forward-&gt;backward = x-&gt;backward;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//不存在的话说明被删除节点是尾节点,需要更新跳表的尾节点为被删除节点的前一个节点</span><br>        zsl-&gt;tail = x-&gt;backward;<br>    &#125;<br>    <span class="hljs-comment">//因为删除掉的节点可能是层高最高的节点,所以需要调整层高,这里的做法是从当最高层开始遍历,如果发现头节点之后直接是空,说明这一层是空,这时候需要把层高减1</span><br>    <span class="hljs-keyword">while</span>(zsl-&gt;level &gt; <span class="hljs-number">1</span> &amp;&amp; zsl-&gt;header-&gt;level[zsl-&gt;level<span class="hljs-number">-1</span>].forward == <span class="hljs-literal">NULL</span>)<br>        zsl-&gt;level--;<br>    <span class="hljs-comment">//跳表的长度减1</span><br>    zsl-&gt;length--;<br>&#125;<br><br><span class="hljs-comment">// 删除跳表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">zslFree</span><span class="hljs-params">(zskiplist *zsl)</span> &#123;<br>    <span class="hljs-comment">//获取头节点最下面一层的指针</span><br>    zskiplistNode *node = zsl-&gt;header-&gt;level[<span class="hljs-number">0</span>].forward, *next;<br>    <span class="hljs-comment">//释放头节点</span><br>    zfree(zsl-&gt;header);<br>    <span class="hljs-comment">//从第一个节点开始,向后往后一个一个释放内存</span><br>    <span class="hljs-keyword">while</span>(node) &#123;<br>        next = node-&gt;level[<span class="hljs-number">0</span>].forward;<br>        zslFreeNode(node);<br>        node = next;<br>    &#125;<br>    zfree(zsl);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LevelDB中跳跃表的实现及理解</title>
    <link href="/2024/10/01/LevelDB%E4%B8%AD%E8%B7%B3%E8%B7%83%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8F%8A%E7%90%86%E8%A7%A3/"/>
    <url>/2024/10/01/LevelDB%E4%B8%AD%E8%B7%B3%E8%B7%83%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8F%8A%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>LevelDB中SkipList的实现及理解：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</span><br><span class="hljs-comment">// Use of this source code is governed by a BSD-style license that can be</span><br><span class="hljs-comment">// found in the LICENSE file. See the AUTHORS file for names of contributors.</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> STORAGE_LEVELDB_DB_SKIPLIST_H_</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STORAGE_LEVELDB_DB_SKIPLIST_H_</span><br><br><span class="hljs-comment">// Thread safety</span><br><span class="hljs-comment">// -------------</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Writes require external synchronization, most likely a mutex.</span><br><span class="hljs-comment">// Reads require a guarantee that the SkipList will not be destroyed</span><br><span class="hljs-comment">// while the read is in progress.  Apart from that, reads progress</span><br><span class="hljs-comment">// without any internal locking or synchronization.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Invariants:</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// (1) Allocated nodes are never deleted until the SkipList is</span><br><span class="hljs-comment">// destroyed.  This is trivially guaranteed by the code since we</span><br><span class="hljs-comment">// never delete any skip list nodes.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// (2) The contents of a Node except for the next/prev pointers are</span><br><span class="hljs-comment">// immutable after the Node has been linked into the SkipList.</span><br><span class="hljs-comment">// Only Insert() modifies the list, and it is careful to initialize</span><br><span class="hljs-comment">// a node and use release-stores to publish the nodes in one or</span><br><span class="hljs-comment">// more lists.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// ... prev vs. next pointer ordering ...</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;atomic&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cassert&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;util/arena.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;util/random.h&quot;</span></span><br><br><span class="hljs-keyword">namespace</span> leveldb &#123;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Arena</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * SkipList 属于 leveldb 中的核心数据结构，也是 memory table 的具体实现</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * SkipList 的实现挺有意思的，leveldb 是一个 key-value DB，但是 SkipList 类中只定义了 Key，</span><br><span class="hljs-comment"> * 而没有定义 value。这是为什么?</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 因为 leveldb 直接将 User Key 和 User Value 打包成了一个更大的 Key，塞到了 Skip List 中。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * ┌───────────────┬─────────────────┬────────────────────────────┬───────────────┬───────────────┐</span><br><span class="hljs-comment"> * │ size(varint32)│ User Key(string)│Sequence Number | kValueType│ size(varint32)│  User Value   │</span><br><span class="hljs-comment"> * └───────────────┴─────────────────┴────────────────────────────┴───────────────┴───────────────┘</span><br><span class="hljs-comment"> *        ↑</span><br><span class="hljs-comment"> *  值为 user_key.size() + 8</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Key, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Comparator</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SkipList</span> &#123;<br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>;<br><br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-comment">// Create a new SkipList object that will use &quot;cmp&quot; for comparing keys,</span><br>  <span class="hljs-comment">// and will allocate memory using &quot;*arena&quot;.  Objects allocated in the arena</span><br>  <span class="hljs-comment">// must remain allocated for the lifetime of the skiplist object.</span><br>  <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">SkipList</span><span class="hljs-params">(Comparator cmp, Arena* arena)</span></span>;<br>  <span class="hljs-comment">// 不允许进行拷贝构造与拷贝赋值</span><br>  <span class="hljs-built_in">SkipList</span>(<span class="hljs-type">const</span> SkipList&amp;) = <span class="hljs-keyword">delete</span>;<br>  SkipList&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> SkipList&amp;) = <span class="hljs-keyword">delete</span>;<br><br>  <span class="hljs-comment">// Insert key into the list.</span><br>  <span class="hljs-comment">// REQUIRES: nothing that compares equal to key is currently in the list.</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-type">const</span> Key&amp; key)</span></span>;<br><br>  <span class="hljs-comment">// Returns true iff an entry that compares equal to key is in the list.</span><br>  <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Contains</span><span class="hljs-params">(<span class="hljs-type">const</span> Key&amp; key)</span> <span class="hljs-type">const</span></span>;<br><br>  <span class="hljs-comment">// Iteration over the contents of a skip list</span><br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Iterator</span> &#123;<br>   <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// Initialize an iterator over the specified list.</span><br>    <span class="hljs-comment">// The returned iterator is not valid.</span><br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">Iterator</span><span class="hljs-params">(<span class="hljs-type">const</span> SkipList* list)</span></span>;<br><br>    <span class="hljs-comment">// Returns true iff the iterator is positioned at a valid node.</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Valid</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br>    <span class="hljs-comment">// Returns the key at the current position.</span><br>    <span class="hljs-comment">// REQUIRES: Valid()</span><br>    <span class="hljs-function"><span class="hljs-type">const</span> Key&amp; <span class="hljs-title">key</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br>    <span class="hljs-comment">// Advances to the next position.</span><br>    <span class="hljs-comment">// REQUIRES: Valid()</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Next</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// Advances to the previous position.</span><br>    <span class="hljs-comment">// REQUIRES: Valid()</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Prev</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// Advance to the first entry with a key &gt;= target</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Seek</span><span class="hljs-params">(<span class="hljs-type">const</span> Key&amp; target)</span></span>;<br><br>    <span class="hljs-comment">// Position at the first entry in list.</span><br>    <span class="hljs-comment">// Final state of iterator is Valid() iff list is not empty.</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SeekToFirst</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// Position at the last entry in list.</span><br>    <span class="hljs-comment">// Final state of iterator is Valid() iff list is not empty.</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SeekToLast</span><span class="hljs-params">()</span></span>;<br><br>   <span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">const</span> SkipList* list_;<br>    Node* node_;<br>    <span class="hljs-comment">// Intentionally copyable</span><br>  &#125;;<br><br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-keyword">enum</span> &#123; kMaxHeight = <span class="hljs-number">12</span> &#125;;<br><br>  <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">GetMaxHeight</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>    <span class="hljs-comment">// 简单的原子性取出层高，无所谓指令重排</span><br>    <span class="hljs-keyword">return</span> max_height_.<span class="hljs-built_in">load</span>(std::memory_order_relaxed);<br>  &#125;<br><br>  <span class="hljs-function">Node* <span class="hljs-title">NewNode</span><span class="hljs-params">(<span class="hljs-type">const</span> Key&amp; key, <span class="hljs-type">int</span> height)</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">RandomHeight</span><span class="hljs-params">()</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Equal</span><span class="hljs-params">(<span class="hljs-type">const</span> Key&amp; a, <span class="hljs-type">const</span> Key&amp; b)</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> (<span class="hljs-built_in">compare_</span>(a, b) == <span class="hljs-number">0</span>); &#125;<br><br>  <span class="hljs-comment">// Return true if key is greater than the data stored in &quot;n&quot;</span><br>  <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">KeyIsAfterNode</span><span class="hljs-params">(<span class="hljs-type">const</span> Key&amp; key, Node* n)</span> <span class="hljs-type">const</span></span>;<br><br>  <span class="hljs-comment">// Return the earliest node that comes at or after key.</span><br>  <span class="hljs-comment">// Return nullptr if there is no such node.</span><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-comment">// If prev is non-null, fills prev[level] with pointer to previous</span><br>  <span class="hljs-comment">// node at &quot;level&quot; for every level in [0..max_height_-1].</span><br>  <span class="hljs-function">Node* <span class="hljs-title">FindGreaterOrEqual</span><span class="hljs-params">(<span class="hljs-type">const</span> Key&amp; key, Node** prev)</span> <span class="hljs-type">const</span></span>;<br><br>  <span class="hljs-comment">// Return the latest node with a key &lt; key.</span><br>  <span class="hljs-comment">// Return head_ if there is no such node.</span><br>  <span class="hljs-function">Node* <span class="hljs-title">FindLessThan</span><span class="hljs-params">(<span class="hljs-type">const</span> Key&amp; key)</span> <span class="hljs-type">const</span></span>;<br><br>  <span class="hljs-comment">// Return the last node in the list.</span><br>  <span class="hljs-comment">// Return head_ if list is empty.</span><br>  <span class="hljs-function">Node* <span class="hljs-title">FindLast</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br>  <span class="hljs-comment">// Immutable after construction</span><br>  <span class="hljs-comment">// 比较器 用于比较Key的大小</span><br>  Comparator <span class="hljs-type">const</span> compare_;<br>  <span class="hljs-comment">// leveldb 自己封装的一个内存分配器</span><br>  Arena* <span class="hljs-type">const</span> arena_;  <span class="hljs-comment">// Arena used for allocations of nodes</span><br>  <span class="hljs-comment">// 虚拟头结点，也就是 Dummy Head 哨兵节点</span><br>  Node* <span class="hljs-type">const</span> head_;<br><br>  <span class="hljs-comment">// Modified only by Insert().  Read racily by readers, but stale</span><br>  <span class="hljs-comment">// values are ok.</span><br>  std::atomic&lt;<span class="hljs-type">int</span>&gt; max_height_;  <span class="hljs-comment">// Height of the entire list</span><br><br>  <span class="hljs-comment">// Read/written only by Insert().</span><br>  Random rnd_;<br>&#125;;<br><br><span class="hljs-comment">// Implementation details follow</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Node 中使用了比较多的关于指令重排的内容。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 需要注意的是，memory ordering 是针对于单线程而来的，也就是同一个线程内的指令重排情况，比如</span><br><span class="hljs-comment"> * 现在有 2 条语句:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  x = 100;</span><br><span class="hljs-comment"> *  y.store();</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 其中 x 的写入是非原子性的，而 y 的写入是原子性的，不管我们使用何种 memory ordering，y 的原子</span><br><span class="hljs-comment"> * 写入永远是满足的，也就是说，y.store() 必然是多个线程的一个同步点。但是，由于指令重排的原因，x = 100;</span><br><span class="hljs-comment"> * 可能会在 y.store(); 之后执行，也可能会在其之前执行。memory ordering 限制的就是这个。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 1. Relaxed ordering</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Relaxed ordering，也就是 std::memory_order_relaxed，不对重排进行任何限制，只保证相关内存操作的原子性。</span><br><span class="hljs-comment"> * 原子操作之前或者是之后的指令怎么被重排，我们并不关心，反正保证对内存的操作是原子性的就行了。通常用于计数器等场景中</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 2. Release-Acquire ordering</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Release-Acquire ordering 由两个参数所指定，一个是 std::memory_order_acquire，用于 load() 方法，</span><br><span class="hljs-comment"> * 一个则是 std::memory_order_release， 用于 store() 方法。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * std::memory_order_acquire 表示在 load() 之后的所有读写操作，不允许被重排到这个 load() 的前面。</span><br><span class="hljs-comment"> * std::memory_order_release 表示在 store() 之前的所有读写操作，不允许被重排到这个 store() 的后面</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Key, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Comparator</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SkipList</span>&lt;Key, Comparator&gt;::Node &#123;<br>  <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-type">const</span> Key&amp; k)</span> : key(k) &#123;</span>&#125;<br><br>  Key <span class="hljs-type">const</span> key;<br><br>  <span class="hljs-comment">// Accessors/mutators for links.  Wrapped in methods so we can</span><br>  <span class="hljs-comment">// add the appropriate barriers as necessary.</span><br>  <span class="hljs-function">Node* <span class="hljs-title">Next</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-built_in">assert</span>(n &gt;= <span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// Use an &#x27;acquire load&#x27; so that we observe a fully initialized</span><br>    <span class="hljs-comment">// version of the returned Node.</span><br>    <span class="hljs-keyword">return</span> next_[n].<span class="hljs-built_in">load</span>(std::memory_order_acquire);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetNext</span><span class="hljs-params">(<span class="hljs-type">int</span> n, Node* x)</span> </span>&#123;<br>    <span class="hljs-built_in">assert</span>(n &gt;= <span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// Use a &#x27;release store&#x27; so that anybody who reads through this</span><br>    <span class="hljs-comment">// pointer observes a fully initialized version of the inserted node.</span><br>    next_[n].<span class="hljs-built_in">store</span>(x, std::memory_order_release);<br>  &#125;<br><br>  <span class="hljs-comment">// No-barrier variants that can be safely used in a few locations.</span><br>  <span class="hljs-function">Node* <span class="hljs-title">NoBarrier_Next</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-built_in">assert</span>(n &gt;= <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> next_[n].<span class="hljs-built_in">load</span>(std::memory_order_relaxed);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">NoBarrier_SetNext</span><span class="hljs-params">(<span class="hljs-type">int</span> n, Node* x)</span> </span>&#123;<br>    <span class="hljs-built_in">assert</span>(n &gt;= <span class="hljs-number">0</span>);<br>    next_[n].<span class="hljs-built_in">store</span>(x, std::memory_order_relaxed);<br>  &#125;<br><br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-comment">// Array of length equal to the node height.  next_[0] is lowest level link.</span><br>  <span class="hljs-comment">// 1) 这里提前声明并申请了一个内存，用于存储第 0 层的数据，因为第 0 层必然存在数据。</span><br>  <span class="hljs-comment">// 2) 这里的数组长度其实就是层高，假设 next_ 长度为 n，那么就会从 next_[n-1] 开始查找。</span><br>  <span class="hljs-comment">// 3) 因为 skip list 的 level 并不会太大，使用数组存储 Node 指针的话对 CPU 内存更友好</span><br>  <span class="hljs-comment">// https://15721.courses.cs.cmu.edu/spring2018/papers/08-oltpindexes1/pugh-skiplists-cacm1990.pdf</span><br>  std::atomic&lt;Node*&gt; next_[<span class="hljs-number">1</span>];<br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Key, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Comparator</span>&gt;<br><span class="hljs-keyword">typename</span> SkipList&lt;Key, Comparator&gt;::Node* SkipList&lt;Key, Comparator&gt;::<span class="hljs-built_in">NewNode</span>(<br>    <span class="hljs-type">const</span> Key&amp; key, <span class="hljs-type">int</span> height) &#123;<br>  <span class="hljs-comment">// 内存分配时只需要再分配 level - 1 层，因为第 0 层已经预先分配完毕了。</span><br>  <span class="hljs-type">char</span>* <span class="hljs-type">const</span> node_memory = arena_-&gt;<span class="hljs-built_in">AllocateAligned</span>(<br>      <span class="hljs-built_in">sizeof</span>(Node) + <span class="hljs-built_in">sizeof</span>(std::atomic&lt;Node*&gt;) * (height - <span class="hljs-number">1</span>));<br>  <span class="hljs-comment">// 这里是 placement new 的写法，在现有的内存上进行 new object</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> (node_memory) <span class="hljs-built_in">Node</span>(key);<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Key, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Comparator</span>&gt;<br><span class="hljs-keyword">inline</span> SkipList&lt;Key, Comparator&gt;::Iterator::<span class="hljs-built_in">Iterator</span>(<span class="hljs-type">const</span> SkipList* list) &#123;<br>  list_ = list;<br>  node_ = <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Key, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Comparator</span>&gt;<br><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> SkipList&lt;Key, Comparator&gt;::Iterator::<span class="hljs-built_in">Valid</span>() <span class="hljs-type">const</span> &#123;<br>  <span class="hljs-keyword">return</span> node_ != <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Key, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Comparator</span>&gt;<br><span class="hljs-keyword">inline</span> <span class="hljs-type">const</span> Key&amp; SkipList&lt;Key, Comparator&gt;::Iterator::<span class="hljs-built_in">key</span>() <span class="hljs-type">const</span> &#123;<br>  <span class="hljs-built_in">assert</span>(<span class="hljs-built_in">Valid</span>());<br>  <span class="hljs-keyword">return</span> node_-&gt;key;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Key, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Comparator</span>&gt;<br><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> SkipList&lt;Key, Comparator&gt;::Iterator::<span class="hljs-built_in">Next</span>() &#123;<br>  <span class="hljs-built_in">assert</span>(<span class="hljs-built_in">Valid</span>());<br>  node_ = node_-&gt;<span class="hljs-built_in">Next</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Key, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Comparator</span>&gt;<br><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> SkipList&lt;Key, Comparator&gt;::Iterator::<span class="hljs-built_in">Prev</span>() &#123;<br>  <span class="hljs-comment">// Instead of using explicit &quot;prev&quot; links, we just search for the</span><br>  <span class="hljs-comment">// last node that falls before key.</span><br>  <span class="hljs-built_in">assert</span>(<span class="hljs-built_in">Valid</span>());<br>  node_ = list_-&gt;<span class="hljs-built_in">FindLessThan</span>(node_-&gt;key);<br>  <span class="hljs-keyword">if</span> (node_ == list_-&gt;head_) &#123;<br>    node_ = <span class="hljs-literal">nullptr</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Key, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Comparator</span>&gt;<br><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> SkipList&lt;Key, Comparator&gt;::Iterator::<span class="hljs-built_in">Seek</span>(<span class="hljs-type">const</span> Key&amp; target) &#123;<br>  node_ = list_-&gt;<span class="hljs-built_in">FindGreaterOrEqual</span>(target, <span class="hljs-literal">nullptr</span>);<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Key, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Comparator</span>&gt;<br><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> SkipList&lt;Key, Comparator&gt;::Iterator::<span class="hljs-built_in">SeekToFirst</span>() &#123;<br>  node_ = list_-&gt;head_-&gt;<span class="hljs-built_in">Next</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Key, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Comparator</span>&gt;<br><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> SkipList&lt;Key, Comparator&gt;::Iterator::<span class="hljs-built_in">SeekToLast</span>() &#123;<br>  node_ = list_-&gt;<span class="hljs-built_in">FindLast</span>();<br>  <span class="hljs-keyword">if</span> (node_ == list_-&gt;head_) &#123;<br>    node_ = <span class="hljs-literal">nullptr</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Key, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Comparator</span>&gt;<br><span class="hljs-type">int</span> SkipList&lt;Key, Comparator&gt;::<span class="hljs-built_in">RandomHeight</span>() &#123;<br>  <span class="hljs-comment">// Increase height with probability 1 in kBranching</span><br>  <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> kBranching = <span class="hljs-number">4</span>;<br>  <span class="hljs-type">int</span> height = <span class="hljs-number">1</span>;<br>  <span class="hljs-comment">// (rnd_.Next() % kBranching) == 0 这个条件限制了上层的节点数量为下层节点数量的 1/4</span><br>  <span class="hljs-comment">// 照此推算，如果根节点的节点数为 1，并且总计有 12 层的话，那么就有 1 + 4 + 16 + ... + 4^11 个节点</span><br>  <span class="hljs-comment">// 差不多 500 多万数据，理论上来说应该是不可能写满的，因为 Memory Write Buffer 有容量限制</span><br>  <span class="hljs-keyword">while</span> (height &lt; kMaxHeight &amp;&amp; ((rnd_.<span class="hljs-built_in">Next</span>() % kBranching) == <span class="hljs-number">0</span>)) &#123;<br>    height++;<br>  &#125;<br>  <span class="hljs-built_in">assert</span>(height &gt; <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">assert</span>(height &lt;= kMaxHeight);<br>  <span class="hljs-keyword">return</span> height;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Key, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Comparator</span>&gt;<br><span class="hljs-type">bool</span> SkipList&lt;Key, Comparator&gt;::<span class="hljs-built_in">KeyIsAfterNode</span>(<span class="hljs-type">const</span> Key&amp; key, Node* n) <span class="hljs-type">const</span> &#123;<br>  <span class="hljs-comment">// null n is considered infinite</span><br>  <span class="hljs-keyword">return</span> (n != <span class="hljs-literal">nullptr</span>) &amp;&amp; (<span class="hljs-built_in">compare_</span>(n-&gt;key, key) &lt; <span class="hljs-number">0</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* 在 Skip List 中寻找第一个大于等于 key 的节点，同时使用 prev 数组记录下该节点的每一个 level</span><br><span class="hljs-comment"> * 的前驱节点，用于辅助实现 insert 和 delete 操作，把 prev 数组当作是单向链表的 prev 节点就可以了</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *    5-&gt;10-&gt;18-&gt;22-&gt;35-&gt;44</span><br><span class="hljs-comment"> *           ↑   ↑</span><br><span class="hljs-comment"> *         prev node</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 如上面的单链表，node 是我们要查找的节点，当我们返回给调用方之后，如果调用方需要做删除操作的话，</span><br><span class="hljs-comment"> * 就可以这样来做:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *    prev-&gt;next = node-&gt;next;</span><br><span class="hljs-comment"> *    node-&gt;next = nullptr;</span><br><span class="hljs-comment"> *    delete node;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 很好的一个设计，在查找的过程中记录一些其他接口所需的信息，最大可能地进行代码复用。*/</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Key, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Comparator</span>&gt;<br><span class="hljs-keyword">typename</span> SkipList&lt;Key, Comparator&gt;::Node*<br>SkipList&lt;Key, Comparator&gt;::<span class="hljs-built_in">FindGreaterOrEqual</span>(<span class="hljs-type">const</span> Key&amp; key,<br>                                              Node** prev) <span class="hljs-type">const</span> &#123;<br>  Node* x = head_;<br>  <span class="hljs-comment">// index 是从 0 开始的，所以需要减去 1</span><br>  <span class="hljs-type">int</span> level = <span class="hljs-built_in">GetMaxHeight</span>() - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-comment">/* 获取当前 level 层的下一个节点 */</span><br>    Node* next = x-&gt;<span class="hljs-built_in">Next</span>(level);<br>    <span class="hljs-comment">/* KeyIsAfterNode 实际上就是使用 Compactor 比较 Key 和 next-&gt;key 的大小关系。</span><br><span class="hljs-comment">     * 如果当前待查找节点比 next-&gt;key 还要大的话，那么就继续在同一层向后查找 */</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">KeyIsAfterNode</span>(key, next)) &#123;<br>      <span class="hljs-comment">// Keep searching in this list</span><br>      x = next;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// prev 数组主要记录的就是每一层的 prev 节点，主要用于插入和删除时使用</span><br>      <span class="hljs-keyword">if</span> (prev != <span class="hljs-literal">nullptr</span>) prev[level] = x;<br>      <span class="hljs-keyword">if</span> (level == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> next;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Switch to next list</span><br>        level--;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/* 寻找最后一个小于等于 key 的节点 */</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Key, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Comparator</span>&gt;<br><span class="hljs-keyword">typename</span> SkipList&lt;Key, Comparator&gt;::Node*<br>SkipList&lt;Key, Comparator&gt;::<span class="hljs-built_in">FindLessThan</span>(<span class="hljs-type">const</span> Key&amp; key) <span class="hljs-type">const</span> &#123;<br>  Node* x = head_;<br>  <span class="hljs-type">int</span> level = <span class="hljs-built_in">GetMaxHeight</span>() - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-built_in">assert</span>(x == head_ || <span class="hljs-built_in">compare_</span>(x-&gt;key, key) &lt; <span class="hljs-number">0</span>);<br>    Node* next = x-&gt;<span class="hljs-built_in">Next</span>(level);<br>    <span class="hljs-keyword">if</span> (next == <span class="hljs-literal">nullptr</span> || <span class="hljs-built_in">compare_</span>(next-&gt;key, key) &gt;= <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">if</span> (level == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> x;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Switch to next list</span><br>        level--;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      x = next;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/* 获取 Skip List 中的最后一个节点。注意 FindLast() 实现不能从 level 0 直接使用 next 指针</span><br><span class="hljs-comment"> * 一路往前寻找，因为这样的话其时间复杂度将为 O(n)。而从最高层往下找的话，其时间复杂度为 O(logn) */</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Key, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Comparator</span>&gt;<br><span class="hljs-keyword">typename</span> SkipList&lt;Key, Comparator&gt;::Node* SkipList&lt;Key, Comparator&gt;::<span class="hljs-built_in">FindLast</span>()<br>    <span class="hljs-type">const</span> &#123;<br>  Node* x = head_;<br>  <span class="hljs-type">int</span> level = <span class="hljs-built_in">GetMaxHeight</span>() - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    Node* next = x-&gt;<span class="hljs-built_in">Next</span>(level);<br>    <span class="hljs-keyword">if</span> (next == <span class="hljs-literal">nullptr</span>) &#123;<br>      <span class="hljs-keyword">if</span> (level == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> x;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Switch to next list</span><br>        level--;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      x = next;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Key, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Comparator</span>&gt;<br>SkipList&lt;Key, Comparator&gt;::<span class="hljs-built_in">SkipList</span>(Comparator cmp, Arena* arena)<br>    : <span class="hljs-built_in">compare_</span>(cmp),<br>      <span class="hljs-built_in">arena_</span>(arena),<br>      <span class="hljs-built_in">head_</span>(<span class="hljs-built_in">NewNode</span>(<span class="hljs-number">0</span> <span class="hljs-comment">/* any key will do */</span>, kMaxHeight)),<br>      <span class="hljs-built_in">max_height_</span>(<span class="hljs-number">1</span>),<br>      <span class="hljs-built_in">rnd_</span>(<span class="hljs-number">0xdeadbeef</span>) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; kMaxHeight; i++) &#123;<br>    head_-&gt;<span class="hljs-built_in">SetNext</span>(i, <span class="hljs-literal">nullptr</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Key, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Comparator</span>&gt;<br><span class="hljs-type">void</span> SkipList&lt;Key, Comparator&gt;::<span class="hljs-built_in">Insert</span>(<span class="hljs-type">const</span> Key&amp; key) &#123;<br>  <span class="hljs-comment">// TODO(opt): We can use a barrier-free variant of FindGreaterOrEqual()</span><br>  <span class="hljs-comment">// here since Insert() is externally synchronized.</span><br>  Node* prev[kMaxHeight];<br>  Node* x = <span class="hljs-built_in">FindGreaterOrEqual</span>(key, prev);<br><br>  <span class="hljs-comment">// Our data structure does not allow duplicate insertion</span><br>  <span class="hljs-built_in">assert</span>(x == <span class="hljs-literal">nullptr</span> || !<span class="hljs-built_in">Equal</span>(key, x-&gt;key));<br><br>  <span class="hljs-type">int</span> height = <span class="hljs-built_in">RandomHeight</span>();<br>  <span class="hljs-keyword">if</span> (height &gt; <span class="hljs-built_in">GetMaxHeight</span>()) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-built_in">GetMaxHeight</span>(); i &lt; height; i++) &#123;<br>      prev[i] = head_;<br>    &#125;<br>    <span class="hljs-comment">// It is ok to mutate max_height_ without any synchronization</span><br>    <span class="hljs-comment">// with concurrent readers.  A concurrent reader that observes</span><br>    <span class="hljs-comment">// the new value of max_height_ will see either the old value of</span><br>    <span class="hljs-comment">// new level pointers from head_ (nullptr), or a new value set in</span><br>    <span class="hljs-comment">// the loop below.  In the former case the reader will</span><br>    <span class="hljs-comment">// immediately drop to the next level since nullptr sorts after all</span><br>    <span class="hljs-comment">// keys.  In the latter case the reader will use the new node.</span><br>    max_height_.<span class="hljs-built_in">store</span>(height, std::memory_order_relaxed);<br>  &#125;<br><br>  x = <span class="hljs-built_in">NewNode</span>(key, height);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; height; i++) &#123;<br>    <span class="hljs-comment">// NoBarrier_SetNext() suffices since we will add a barrier when</span><br>    <span class="hljs-comment">// we publish a pointer to &quot;x&quot; in prev[i].</span><br>    x-&gt;<span class="hljs-built_in">NoBarrier_SetNext</span>(i, prev[i]-&gt;<span class="hljs-built_in">NoBarrier_Next</span>(i));<br>    prev[i]-&gt;<span class="hljs-built_in">SetNext</span>(i, x);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Key, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Comparator</span>&gt;<br><span class="hljs-type">bool</span> SkipList&lt;Key, Comparator&gt;::<span class="hljs-built_in">Contains</span>(<span class="hljs-type">const</span> Key&amp; key) <span class="hljs-type">const</span> &#123;<br>  Node* x = <span class="hljs-built_in">FindGreaterOrEqual</span>(key, <span class="hljs-literal">nullptr</span>);<br>  <span class="hljs-keyword">if</span> (x != <span class="hljs-literal">nullptr</span> &amp;&amp; <span class="hljs-built_in">Equal</span>(key, x-&gt;key)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>&#125;<br><br>&#125;  <span class="hljs-comment">// namespace leveldb</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span>  <span class="hljs-comment">// STORAGE_LEVELDB_DB_SKIPLIST_H_</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>跳跃表</title>
    <link href="/2024/09/27/%E8%B7%B3%E8%B7%83%E8%A1%A8/"/>
    <url>/2024/09/27/%E8%B7%B3%E8%B7%83%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>跳跃表(skiplist)由大牛 William Pugh 在论文《Skip lists: a probabilistic alternative to balanced trees》中提出，跳跃表以有序的方式在层次化的链表中保存元素，效率和平衡树媲美：查找、删除、添加等操作都可以在对数期望时间下完成。跳跃表体现了“<strong>空间换时间</strong>”的思想，从本质上来说，跳跃表是在单链表的基础上在选取部分结点添加索引，这些索引在逻辑关系上构成了一个新的线性表，并且索引的层数可以叠加，生成二级索引、三级索引、多级索引，以实现对结点的跳跃查找的功能。与二分查找类似，跳跃表能够在 O(㏒n)的时间复杂度之下完成查找，与红黑树等数据结构查找的时间复杂度相同，但是相比之下，跳跃表能够更好的支持并发操作，而且实现这样的结构比红黑树等数据结构要简单、直观许多。</p><h1 id="结构特点"><a href="#结构特点" class="headerlink" title="结构特点"></a>结构特点</h1><p>跳跃表由多个层级的链表组成。最底层是一个普通的有序链表，包含所有的元素。每个上层链表是通过对下层链表的元素进行一定规则的间隔选取而形成的。例如，每隔一个元素选取一个进入上一层链表，上层链表的元素数量相对下层更少，但依然保持着有序性。</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><ul><li><p><strong>搜索（Search）</strong>：跳跃表的搜索操作平均时间复杂度为O(㏒n) ，这是因为在每一层，搜索操作都可能跳过多个元素，具体跳过的元素数量取决于随机化过程。</p><p>1）从上到下与索引结点进行比较，逐步缩小需要查询的结点所在的范围（因为跳跃表是有序的数据结构，类似于二分的思想）【平均：O（log N),最坏为O(N)】</p><p><strong>总体来说，跳跃表的查询操作的时间复杂度为O(log N)</strong></p></li><li><p><strong>插入（Insertion）</strong>：插入操作同样具有O(㏒n)的平均时间复杂度。插入时，需要找到插入点，并且可能需要更新多个层的链表。</p><p>1）新结点从上到下与各层索引结点逐一比较，确定在原链表的插入位置：【O(log N）】</p><p>2）确定在原链表的插入位置后直接插入:【O(1)】</p><p>3）利用随机的方式决定新结点上升为几层索引结点：【O(log N)】</p><p>总体来说，<strong>跳跃表的插入操作的时间复杂度是O(log N)</strong></p></li><li><p><strong>删除（Deletion）</strong>：删除操作的时间复杂度也是O(㏒n)，需要找到要删除的元素，并在所有包含该元素的层上进行删除。</p><p>1）自上而下，查找第一次出现结点的索引，并逐层找到每一层对应的结点:【O(log N)】</p><p>2）删除每一层查到的结点，如果该层只剩一个结点，删除整个一层（原链表除外）【O(log N)】</p><p><strong>总的来说，跳跃表的删除操作的时间复杂度是O(log N)</strong></p></li></ul><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>期望空间复杂度 O(n)，最差空间复杂度O(n㏒n)</p><p>对于每层的期待：第一层n，第二层n&#x2F;2，第三层n&#x2F;2^2^，…，直到 n&#x2F;2^log n^&#x3D;1。</p><p>所以，总空间需求：S &#x3D; n + n&#x2F;2 + n&#x2F;2^2^ + … + n&#x2F;2^log n^ &lt; n(1 + 1&#x2F;2 + 1&#x2F;2^2^ + … + 1&#x2F;2^∞^) &#x3D;2n</p><p>因此他的空间复杂度为 2n &#x3D; O(n)</p><p><strong>总的来说，跳跃表的空间复杂度为O(N)</strong></p><h2 id="跳跃表的高度"><a href="#跳跃表的高度" class="headerlink" title="跳跃表的高度"></a>跳跃表的高度</h2><p>对每层来说，它会向上增长的概率为1&#x2F;2，则第m层向上增长的概率为1&#x2F;2^m^；</p><p>n个元素，则在m层元素数目的期待为E<del>m</del> &#x3D; n&#x2F;2^m^；</p><p>当E<del>m</del> &#x3D; 1，m &#x3D; log<del>2</del>n即为层数的期待。</p><p><strong>故其高度期待为 E<del>h</del> &#x3D; O(log n)。</strong></p><h1 id="主要操作"><a href="#主要操作" class="headerlink" title="主要操作"></a>主要操作</h1><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>插入一个新元素时，首先在最底层链表中进行常规的插入操作，确保链表的有序性。然后，通过随机的方式决定新元素是否要提升到上层链表中。通常使用一个概率值来控制提升的次数，这样可以保证跳跃表的高度在一定范围内保持平衡。如果新元素被提升到上层链表，就继续按照同样的方式决定是否进一步提升到更高层链表，直到不再满足提升条件为止。</p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>删除一个元素时，先在跳跃表中找到该元素。然后从最上层链表开始，依次在每个包含该元素的链表中删除它。删除操作不会影响跳跃表的整体结构特性，只是减少了链表中的元素数量。</p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>当在跳跃表中进行查找操作时，从最上层链表的左端开始。由于上层链表的元素间隔较大，所以可以快速跳过一些不可能包含目标元素的区间。如果当前节点的值小于目标值，就向右移动到下一个节点；如果当前节点的值大于目标值，就下降到下一层链表继续查找。重复这个过程，直到找到目标元素或者到达最底层链表的末尾。这个查找过程类似于在楼梯上跳跃着前进，从而大大提高了查找效率。</p><p>总之，跳跃表通过建立多层级的链表结构，在查找、插入和删除操作上实现了较高的效率，同时具有相对简单的实现方式和良好的性能表现。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
